generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Item {
  id           String    @id @default(uuid())
  name         String
  stock        Float     @default(0)
  available    Boolean   @default(false)
  price        Float
  stock_alert  Boolean   @default(false)
  expired_date DateTime?

  default_uom_id String?
  default_uom    Uom?    @relation(fields: [default_uom_id], references: [id])

  supplier_id String?
  supplier    Supplier? @relation(fields: [supplier_id], references: [id])

  category_id String
  category    Category @relation(fields: [category_id], references: [id])

  list_uom     ItemUom[]
  stock_opname StockOpname[]
  item_logs    ItemLog[]
  transactions ItemTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Uom {
  id     String @id @default(uuid())
  name   String

  item_uom ItemUom[]
  item      Item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemUom {
  item_id String
  uom_id  String
  item    Item   @relation(fields: [item_id], references: [id])
  uom     Uom    @relation(fields: [uom_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([item_id, uom_id]) // Menetapkan item_id dan uom_id sebagai kunci gabungan
}

model Category {
  id   String @id @default(uuid())
  name String

  item Item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id             String @id @default(uuid())
  name           String
  address        String
  phone          String
  email          String
  contact_person String
  items          Item[]
  item_transaction   ItemTransaction[]
  service_transaction ServieTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Asset {
  id          String @id @default(uuid())
  name        String
  description String
  price       Float
  uom         String
  stock       Float
  type        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemLog {
  id            String @id @default(uuid())
  name          String
  initial_stock Float
  final_stock   Float
  uom           String
  item_id       String
  item          Item   @relation(fields: [item_id], references: [id])
  type          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemTransaction {
  id          String  @id @default(uuid())
  item_id     String
  item        Item    @relation(fields: [item_id], references: [id])
  type        String
  category    String
  stock       Float
  uom         String
  price       Float
  total       Float
  paid_status Boolean @default(false)

  supplier_id String?
  supplier    Supplier? @relation(fields: [supplier_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServieTransaction {
  id          String  @id @default(uuid())
  name        String
  description String
  price       Float
  type        String
  category    String
  total       Float
  paid_status Boolean @default(false)

  supplier_id String?
  supplier    Supplier? @relation(fields: [supplier_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StockOpname {
  id           String @id @default(uuid())
  name         String
  stock_listed Float
  stock_actual Float
  uom          String
  item_id      String
  item         Item   @relation(fields: [item_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
